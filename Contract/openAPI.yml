openapi: 3.0.3
info:
  title: Orders API
  description: API contract for the Orders service. Supports listing, fetching, creating, and updating orders. Versioned contract for services and HTTP layer.
  version: "1.1.0"
servers:
  - url: http://localhost:3000
    description: Local development server
tags:
  - name: orders
    description: Operations to list, fetch, create and update orders

paths:
  /api/orders:
    get:
      tags: [orders]
      summary: List orders
      description: >
        Return a list of orders. Supports optional filtering via query.
        Response envelope is `{ ok: true, orders: [...] }`.
      parameters:
        - name: limit
          in: query
          description: Max number of orders to return (integer).
          schema:
            type: integer
            minimum: 1
        - name: status
          in: query
          description: Filter by order status (true/false).
          schema:
            type: boolean
        - name: q
          in: query
          description: Free-text search against common fields (name, email, event_id, session_id, metadata).
          schema:
            type: string
      responses:
        '200':
          description: OK — list of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdersResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '502': { $ref: '#/components/responses/ExternalServiceError' }
        '500': { $ref: '#/components/responses/InternalError' }

    post:
      tags: [orders]
      summary: Create a new order
      description: >
        Create a new order. The service layer injects `event_id`, `written_at`, and `status` (default structure) if missing.
        The request body should include required business fields; the response returns the stored order in `{ ok: true, order }`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
      responses:
        '200':
          description: Order created (returns stored order)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '502': { $ref: '#/components/responses/ExternalServiceError' }
        '500': { $ref: '#/components/responses/InternalError' }

  /api/orders/{id}:
    get:
      tags: [orders]
      summary: Get a single order by id
      description: >
        Return a single order by identifier. `id` is treated primarily as a string.
        Services may attempt numeric-tolerant matching and match against fields like `event_id`, `id`, `session_id`, or metadata keys.
        Response envelope is `{ ok: true, order: { ... } }`.
      parameters:
        - name: id
          in: path
          required: true
          description: Order identifier.
          schema:
            type: string
      responses:
        '200':
          description: OK — single order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '502': { $ref: '#/components/responses/ExternalServiceError' }
        '500': { $ref: '#/components/responses/InternalError' }

    patch:
      tags: [orders]
      summary: Update (patch) an existing order
      description: >
        Partially update an order. Only fields provided inside `changes` are applied.
        Fields not present remain unchanged. Nested objects like `metadata` and `status` are merged according to service rules.
        Response envelope is `{ ok: true, order: { ... } }`.
      parameters:
        - name: id
          in: path
          required: true
          description: Order identifier.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [changes]
              properties:
                changes:
                  type: object
                  description: Partial order fields to update.
                  additionalProperties: true
            example:
              changes:
                name: "Updated Customer"
                status:
                  in_transit:
                    status: true
                    date: "2025-09-27"
                    time: "14:30"
                metadata:
                  phone: "911111111"
      responses:
        '200':
          description: Order updated (returns stored order)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '502': { $ref: '#/components/responses/ExternalServiceError' }
        '500': { $ref: '#/components/responses/InternalError' }

components:
  schemas:
    Item:
      type: object
      required: [id, name, quantity, unit_amount]
      properties:
        id: { type: string }
        name: { type: string }
        quantity: { type: integer, minimum: 0 }
        unit_amount: { type: integer, description: "Unit amount in minor units (cents)" }
      additionalProperties: true

    NewOrder:
      type: object
      required: [name, items, amount_total, currency]
      properties:
        session_id: { type: string }
        name: { type: string }
        email: { type: string, format: email }
        amount_total: { type: integer }
        currency: { type: string }
        items:
          type: array
          items: { $ref: '#/components/schemas/Item' }
        metadata: { type: object }
        track_url: { type: string }
        metadata_raw: { type: object }
      additionalProperties: true

    Order:
      type: object
      required: [event_id, written_at, name, amount_total, currency, items, metadata, status, metadata_raw]
      properties:
        event_id: { type: string }
        session_id: { type: [string, "null"] }
        written_at: { type: string, format: date-time }
        name: { type: string }
        email: { type: [string, "null"], format: email }
        amount_total: { type: integer }
        currency: { type: string }
        items:
          type: array
          items: { $ref: '#/components/schemas/Item' }
        metadata: { type: object }
        track_url: { type: string }
        status:
          type: object
          description: Status map with delivery steps.
          additionalProperties: true
        metadata_raw: { type: object }
      additionalProperties: true

    OrdersResponse:
      type: object
      required: [ok, orders]
      properties:
        ok: { type: boolean, const: true }
        orders:
          type: array
          items: { $ref: '#/components/schemas/Order' }

    OrderResponse:
      type: object
      required: [ok, order]
      properties:
        ok: { type: boolean, const: true }
        order: { $ref: '#/components/schemas/Order' }

    ErrorEnvelope:
      type: object
      required: [ok, error]
      properties:
        ok: { type: boolean, const: false }
        error:
          type: object
          required: [code, message]
          properties:
            code: { type: string }
            message: { type: string }
            details: { type: object }
          additionalProperties: true

  responses:
    BadRequest:
      description: Validation error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorEnvelope' }
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorEnvelope' }
    ExternalServiceError:
      description: Downstream DB or external service failure
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorEnvelope' }
    InternalError:
      description: Unexpected server error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorEnvelope' }

security: []
