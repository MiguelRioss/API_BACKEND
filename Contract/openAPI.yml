openapi: 3.0.3
info:
  title: Orders API
  description: API contract for the Orders service. Returns order list and single order by id. Versioned contract for services and HTTP layer.
  version: "1.0.0"
servers:
  - url: http://localhost:3000
    description: Local development server
tags:
  - name: orders
    description: Operations to list and fetch orders

paths:
  /api/orders:
    get:
      tags:
        - orders
      summary: List orders
      description: >
        Return a list of orders. Supports optional filtering via query.
        Response envelope is `{ ok: true, orders: [...] }`.
      parameters:
        - name: limit
          in: query
          description: Max number of orders to return (integer).
          schema:
            type: integer
            minimum: 1
        - name: status
          in: query
          description: Filter by order status (true/false).
          schema:
            type: boolean
        - name: q
          in: query
          description: Free-text search against common fields (name, email, event_id, session_id, metadata).
          schema:
            type: string
      responses:
        '200':
          description: OK — list of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdersResponse'
              examples:
                sample:
                  summary: Example list response
                  value:
                    ok: true
                    orders:
                      - event_id: "evt_1SALZLPjytaoBek7ZzrMhi15"
                        session_id: "cs_test_b1IUDa2CTVkK8XKrQcntt3daZKb7vA9hGXXWf8Vlh74F6fhKavPagaUFpp"
                        written_at: "2025-09-23T02:03:03.792Z"
                        name: "Alvaro Ferranti"
                        email: "customer@example.com"
                        amount_total: 3999
                        currency: "eur"
                        items:
                          - id: "price_1"
                            name: "IBOTINCTURE™ TOTAL EXTRACT (60 ML)"
                            quantity: 1
                            unit_amount: 3999
                        metadata:
                          addr_city: "Sintra"
                          addr_ctry: "PT"
                          addr_line1: "Rua Engenheiro Sampaio Baptista,12"
                          addr_zip: "2710-691"
                          full_name: "Alvaro Ferranti"
                          phone: "965751649"
                        track_url: ""
                        status: false
                        metadata_raw: {}
        '400':
          $ref: '#/components/responses/BadRequest'
        '502':
          $ref: '#/components/responses/ExternalServiceError'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/orders/{id}:
    get:
      tags:
        - orders
      summary: Get a single order by id
      description: >
        Return a single order by identifier. `id` is treated primarily as a string.
        Services may attempt numeric-tolerant matching and match against fields like `event_id`, `id`, `session_id`, or metadata keys.
        Response envelope is `{ ok: true, order: { ... } }`.
      parameters:
        - name: id
          in: path
          required: true
          description: Order identifier (event_id, id, session_id, or numeric id).
          schema:
            type: string
      responses:
        '200':
          description: OK — single order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
              examples:
                orderExample:
                  summary: Example order response
                  value:
                    ok: true
                    order:
                      event_id: "evt_1SALZLPjytaoBek7ZzrMhi15"
                      session_id: "cs_test_b1IUDa2CTVkK8XKrQcntt3daZKb7vA9hGXXWf8Vlh74F6fhKavPagaUFpp"
                      written_at: "2025-09-23T02:03:03.792Z"
                      name: "Alvaro Ferranti"
                      email: "customer@example.com"
                      amount_total: 3999
                      currency: "eur"
                      items:
                        - id: "price_1"
                          name: "IBOTINCTURE™ TOTAL EXTRACT (60 ML)"
                          quantity: 1
                          unit_amount: 3999
                      metadata:
                        addr_city: "Sintra"
                        addr_ctry: "PT"
                        addr_line1: "Rua Engenheiro Sampaio Baptista,12"
                        addr_zip: "2710-691"
                        full_name: "Alvaro Ferranti"
                        phone: "965751649"
                      track_url: ""
                      status: false
                      metadata_raw: {}
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '502':
          $ref: '#/components/responses/ExternalServiceError'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  schemas:
    Item:
      type: object
      required:
        - id
        - name
        - quantity
        - unit_amount
      properties:
        id:
          type: string
          description: Price id or product id
        name:
          type: string
        quantity:
          type: integer
          minimum: 0
        unit_amount:
          type: integer
          description: Unit amount in minor units (cents)
      additionalProperties: true

    Order:
      type: object
      required:
        - event_id
        - written_at
        - name
        - amount_total
        - currency
        - items
        - metadata
        - status
        - metadata_raw
      properties:
        event_id:
          type: string
        session_id:
          type: [string, "null"]
        written_at:
          type: string
          format: date-time
        name:
          type: string
        email:
          type: [string, "null"]
          format: email
        amount_total:
          type: integer
        currency:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        metadata:
          type: object
        track_url:
          type: string
        status:
          type: boolean
          default: false
          description: "Order status. Must be present and default to false on create/store."
        metadata_raw:
          type: object
      additionalProperties: true

    OrdersResponse:
      type: object
      required:
        - ok
        - orders
      properties:
        ok:
          type: boolean
          const: true
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'

    OrderResponse:
      type: object
      required:
        - ok
        - order
      properties:
        ok:
          type: boolean
          const: true
        order:
          $ref: '#/components/schemas/Order'

    ErrorEnvelope:
      type: object
      required:
        - ok
        - error
      properties:
        ok:
          type: boolean
          const: false
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
              description: optional structured details
          additionalProperties: true

  responses:
    BadRequest:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          examples:
            validation:
              value:
                ok: false
                error:
                  code: "VALIDATION_ERROR"
                  message: "Order id is required"
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          examples:
            notfound:
              value:
                ok: false
                error:
                  code: "NOT_FOUND"
                  message: "Order evt_XXXX not found"
    ExternalServiceError:
      description: Downstream DB or external service failure
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          examples:
            external:
              value:
                ok: false
                error:
                  code: "EXTERNAL_SERVICE_ERROR"
                  message: "Failed to read orders from DB"
                  details:
                    original: "ENOENT: no such file or directory, open 'database/data.json'"
    InternalError:
      description: Unexpected server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          examples:
            internal:
              value:
                ok: false
                error:
                  code: "INTERNAL_ERROR"
                  message: "Internal server error"

security: []
